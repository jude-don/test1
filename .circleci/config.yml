# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


jobs:
  # say-hello:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: cimg/base:stable
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello"
  #         command: "echo Hello, World!"

  # Create cloudformation Stack Job

  # create_infrastructure: 
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: Create Cloudformation Stack
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file template.yml \
  #               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
  #               --region us-east-1
  #       - run: return 1
  #       - destroy_environment
  #         when: on_fail

  # Exercise: Config and Deployment
    
  # configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["7e:73:e4:d0:d7:2c:f5:3a:2f:4d:d4:fa:53:76:0e:16"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # install the dependencies needed for your playbook
  #           apk add --update ansible 
  #     - run:
  #         name: Ensure your key is not publicly viewable.
  #         command: |
  #           chmod 400 udacity.pem
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory main-4.yml

  # Smoke Tests

  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi   

  #Smoke Test Intentionally Failing
    # smoke_test_1:
    #   docker:
    #     - image: alpine:latest
    #   steps:
    #     - run:
    #         name: Test job
    #         command: |  
    #           return 1
    #     - run: destroy_environment

  # Promote to Production Exercise
  promote_production:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Cloudfront Distribution
            command: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID= myawsbucket644752792305 \ 
              --tags project=udapeople &


# Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
# Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
# create_and_deploy_front_end:
#   docker:
#     - image: amazon/aws-cli
#   steps:
#       - checkout
#       - run:
#         name: Execute bucket.yml - Create Cloudformation Stack
#         command: |
#           aws cloudformation deploy \
#           --template-file bucket.yml \
#           --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
#           --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
#   # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
#       - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      # - create_infrastructure
      - promote_production
          # requires:
          #   - create_infrastructure
